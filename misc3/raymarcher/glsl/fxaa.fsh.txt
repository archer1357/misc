#version 330

in vec4 glFragment_colour;
in vec2 glFragment_uv;
in vec3 glFragment_normal;
in vec4 glFragment_position;

out vec4 diffuse_colour;

uniform sampler2D	uniform_texture0;
uniform sampler2D	uniform_texture1;
uniform sampler2D	uniform_texture2;
uniform sampler2D	uniform_texture3;

uniform float uniform_invScreenWidth;
uniform float uniform_invScreenHeight;

const float	FXAA_SPAN_MAX	= ( 8.0 );
const float	FXAA_REDUCE_MUL	= ( 1.0 / 8.0 );
const float	FXAA_REDUCE_MIN	= ( 1.0 / 128.0 );
const vec3	FXAA_LUMA		= ( vec3( 0.299, 0.587, 0.114 ) );

/*
====================
Fxaa

	FXAA edge anti-aliasing algorithm
====================
*/
vec4 Fxaa( sampler2D textureSampler, vec2 vertTexcoord, vec2 texcoordOffset ) {
	vec3 rgbNW = texture( textureSampler, vertTexcoord + ( vec2( -1.0, -1.0 ) * texcoordOffset ) ).rgb;
	vec3 rgbNE = texture( textureSampler, vertTexcoord + ( vec2( +1.0, -1.0 ) * texcoordOffset ) ).rgb;
	vec3 rgbSW = texture( textureSampler, vertTexcoord + ( vec2( -1.0, +1.0 ) * texcoordOffset ) ).rgb;
	vec3 rgbSE = texture( textureSampler, vertTexcoord + ( vec2( +1.0, +1.0 ) * texcoordOffset ) ).rgb;
	vec4 rgbM  = texture( textureSampler, vertTexcoord);

	float lumaNW = dot( rgbNW, FXAA_LUMA );
	float lumaNE = dot( rgbNE, FXAA_LUMA );
	float lumaSW = dot( rgbSW, FXAA_LUMA );
	float lumaSE = dot( rgbSE, FXAA_LUMA );
	float lumaM  = dot( rgbM.rgb, FXAA_LUMA );

	float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );
	float lumaMax = max( lumaM, max( max( lumaNW, lumaNE ), max( lumaSW, lumaSE ) ) );

	vec2 dir = vec2( -( ( lumaNW + lumaNE ) - ( lumaSW + lumaSE ) ), ( ( lumaNW + lumaSW ) - ( lumaNE + lumaSE ) ) );
	
	float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * FXAA_REDUCE_MUL, FXAA_REDUCE_MIN );

	float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );

	dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX ), max( vec2( -FXAA_SPAN_MAX, -FXAA_SPAN_MAX ), dir * rcpDirMin ) ) * texcoordOffset;

	vec2 dir2 = dir * 0.5;
	vec3 rgbA = 0.5 * ( texture( textureSampler, vertTexcoord.xy + ( dir * -0.23333333 ) ).xyz + texture( textureSampler, vertTexcoord.xy + ( dir * 0.16666666 ) ).xyz);
	vec3 rgbB = ( rgbA * 0.5 ) + ( 0.25 * ( texture( textureSampler, vertTexcoord.xy - dir2 ).xyz + texture( textureSampler, vertTexcoord.xy + dir2 ).xyz ) );
	float lumaB = dot( rgbB, FXAA_LUMA );

	if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {
		return vec4( rgbA, rgbM.a );
	}

	return vec4( rgbB, rgbM.a );
}

void main() {
	diffuse_colour = Fxaa( uniform_texture0, glFragment_uv, vec2( uniform_invScreenWidth, uniform_invScreenHeight ) );
	
	if ( diffuse_colour.a == 0.0 ) {
		discard;
	}
}
