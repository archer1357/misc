
function test0(camera,screenSize,cursor) {
    var w=screenSize[0];
    var h=screenSize[1];
    var w2=w/2,h2=h/2;
    var viewport=[0,0,w,h];
    
    var cursor2=new THREE.Vector3((cursor[0]/w)*2 - 1,(cursor[1]/h)*2 - 1,0);

    
    var viewProjMat=(new THREE.Matrix4()).multiplyMatrices (camera.projectionMatrix,camera.matrixWorldInverse );
    var invViewProjMat=(new THREE.Matrix4()).multiplyMatrices (camera.matrixWorld,camera.projectionMatrixInverse);
    
   // return this.applyMatrix4(  );

    
    var s2w=cursor2.clone();
    //s2w.unproject( camera );
    s2w.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
    var s2w2=cursor2.clone();
    //s2w2.applyMatrix4( camera.matrixWorld ).applyMatrix4( camera.projectionMatrixInverse);
    s2w2.unproject( camera );
    
    
     //s2w2.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

     //s2w2.applyMatrix4( camera.projectionMatrixInverse );
     //s2w2.applyMatrix4( camera.matrixWorld );
    
    //s2w.x/=s2w.z;
    //s2w.y/=s2w.z;
    
    var w2s=s2w.clone().project( camera );
    w2s.x=(w2s.x*0.5+0.5)*w;
    w2s.y=(w2s.y*0.5+0.5)*h;
    //w2s.z=0;
    
    ////var w2s2=s2w2.clone();
    //w2s2.applyMatrix4( camera.matrixWorldInverse).applyMatrix4( camera.projectionMatrix );
    ////w2s2.applyMatrix4( camera.projectionMatrix).applyMatrix4( camera.matrixWorldInverse );

    //w2s2.x=(w2s2.x*0.5+0.5)*w;
    //w2s2.y=(w2s2.y*0.5+0.5)*h;
    //w2s2.z=0;
    
    //log(camera.matrixWorldInverse.toArray().map(x=>x),"view0");
    //log(camera.projectionMatrix.toArray().map(x=>x),"proj0");
    //log(viewProjMat.toArray().map(x=>x),"viewProj0");
    //log(invViewProjMat.toArray().map(x=>x),"invViewProj0");
     
    log(s2w.toArray().map(x=>x),"s2w0");
    log(w2s.toArray().map(x=>x),"w2s0");
    //log(s2w2.toArray().map(x=>x),"s2w0x");
    //log(w2s2.toArray().map(x=>x),"w2s0x");
    
    
    
    //log(w2s.toArray().map(x=>x|0),"w2s_");
}


function test1(viewPos,zoom,screenSize,cursor) {
    var w=screenSize[0];
    var h=screenSize[1];
    var viewport=[0,0,w,h];
    var right=w*0.5*zoom;
    var top=h*0.5*zoom;
    
    var at=vec3_add_vec3(viewPos,[0,-1,0]);
    var up=[0,0,-1];
    
    var projMat=mat4_ortho(-right,right,-top,top,-1,1);
    var viewMat=mat4_lookAt(viewPos,at,up);
    var viewProjMat=mat4_mul_mat4(projMat,viewMat);
    var invViewProjMat=mat4_inverse(viewProjMat);

    var s2w = vec3_unproject(invViewProjMat,cursor,viewport);
    var w2s=vec3_project(viewProjMat,s2w,viewport);
    
    
    var invProjMat3=mat4_inverse(mat4_ortho(-right,right,-top,top,-1,1));
    var invViewMat3=mat4_inverse(mat4_lookAt(viewPos,at,up));
    var invViewProjMat3=mat4_mul_mat4(invViewMat3,invProjMat3);
    
    var s2w3 = vec3_unproject3(invProjMat3,invViewMat3,cursor,viewport);
    
    //log(projMat.map(x=>x),"proj1");
    //log(viewMat.map(x=>x),"view1");
    //log(viewProjMat.map(x=>x),"viewProj1");
    //log(invViewProjMat.map(x=>x),"invViewProj1");
    //log(invViewProjMat3.map(x=>x),"invViewProj1_");
    log(s2w.map(x=>x),"s2w1");
    log(w2s.map(x=>x),"w2s1");
    //log(s2w3.map(x=>x),"s2w1x");
}

function vec3_unproject3(invProjMat,invViewMat,screenPos,viewport) {
    var x=((screenPos[0]-viewport[0])/viewport[2])*2 - 1;
    var y=((screenPos[1]-viewport[1])/viewport[3])*2 - 1;    
    var p=[x,y,0,1];
    p=mat4_mul_vec4(invProjMat,p);
    p=mat4_mul_vec4(invViewMat,p);
    return p.slice(0,3).map(x=>x/p[3]);
}


function test2(viewPos,zoom,screenSize,cursor) {
    var w=screenSize[0];
    var h=screenSize[1];
    var viewport=[0,0,w,h];
    var right=w*0.5*zoom;
    var top=h*0.5*zoom;
    
    var at=vec3_add_vec3(viewPos,[0,-1,0]);
    var up=[0,0,-1];

    var projMat=glMatrix.mat4.create();
    glMatrix.mat4.ortho(projMat,-right,right,-top,top,-1,1);

    var viewMat=glMatrix.mat4.create();
    //glMatrix.mat4.translate(viewMat,viewMat,viewPos);
    //glMatrix.mat4.scale(viewMat2,viewMat2,[3,3,1]);
    glMatrix.mat4.lookAt(viewMat, viewPos, at, up);

    var viewProjMat=glMatrix.mat4.create();
    glMatrix.mat4.mul(viewProjMat,projMat,viewMat);
    
    var invViewProjMat=glMatrix.mat4.create();
    glMatrix.mat4.invert(invViewProjMat,viewProjMat);

    var s2w=glMatrix.vec3.create();
    glMatrix_unproject(s2w,[cursor[0],cursor[1],0], invViewProjMat, viewport);
    
    var w2s=glMatrix.vec3.create();
    glMatrix_project(w2s,s2w, viewProjMat, viewport);

    //log(projMat.map(x=>x),"proj2");
    //log(viewMat.map(x=>x),"view2");
    //log(viewProjMat.map(x=>x),"viewProj2");
    //log(invViewProjMat.map(x=>x),"invViewProj2");
    log(s2w.map(x=>x),"s2w2");
    log(w2s.map(x=>x),"w2s2");
}


    var viewPos=[curPosZoom[0],0,curPosZoom[1]];
    test1([curPosZoom[0],0,curPosZoom[1]],curPosZoom[2],screenSize,cursor);
    test2([curPosZoom[0],0,curPosZoom[1]],curPosZoom[2],screenSize,cursor,);
    
    
        //cursorLast=cursorLast||cursor.slice();
        //scrolling=inputManager.get("look")?vec2_sub_vec2(cursor,cursorLast):[0,0];
        //cursorLast=cursor.slice();
        
        
        
        
        
        
        
        
        
        
        
        
function updateFirstPersonCamera(stepTime,interpTime,deltaTime) {
    camera = camera||new THREE.PerspectiveCamera( 1, 1, 1, 1 );

    if(inputManager.get("look")) {
        controller.yaw+=inputManager.get("yaw")*deltaTime;
        controller.pitch=clamp(controller.pitch+inputManager.get("pitch")*deltaTime,-1.57,1.57);
    }

    var interpPos = vec3_smooth_lerp(controller.pos,controller.pos2,interpTime);

    camera.fov=90;
    camera.aspect = canvas.width / canvas.height;
    camera.near=1;
    camera.far=1000;
    camera.updateProjectionMatrix();

    camera.position.x=interpPos[0];
    camera.position.y=interpPos[1];
    camera.position.z=interpPos[2];

    var atPos = new THREE.Vector3( 0, 0, -1 );
    atPos.applyAxisAngle (new THREE.Vector3( 1, 0, 0 ),controller.pitch ) ;
    atPos.applyAxisAngle (new THREE.Vector3( 0, 1, 0 ),controller.yaw ) ;
    atPos.add(camera.position);

    camera.lookAt(atPos);
}

    //updateFirstPersonCamera(stepTime,interpTime,deltaTime);
    
    
    
function onStep(stepTime) {
    var moveDir=mat3_mul_vec3(mat3_rotYX(controller.yaw,controller.pitch), (inputManager.get("rightward","upward","forward")));
    smoothMovementCalc(controller.pos,controller.pos2,controller.vel,moveDir,stepTime, 1.5, 7, 400);
}

    inputManager.keyDown("forward",'w',-1);
    inputManager.keyDown("forward",'s',1);
    inputManager.keyDown("rightward",'d',1);
    inputManager.keyDown("rightward",'a',-1);
    inputManager.keyDown("upward",'e',1);
    inputManager.keyDown("upward",'q',-1);

    inputManager.mouseMoveY("pitch",-0.2);
    inputManager.mouseMoveX("yaw",-0.2);


var controller={pos:[0,35,5], pos2:[0,0,0],vel:[0,0,0],yaw:0,pitch:-0.5};













function test1(viewPos,zoom,screenSize,cursor) {
    var viewport=[0,0,screenSize[0],screenSize[1]];
    var right=screenSize[0]*0.5*zoom;
    var top  =screenSize[1]*0.5*zoom;
    
    var at=vec3_add_vec3(viewPos,[0,-1,0]);
    var up=[0,0,-1];
    
    
    var projMat=mat4_ortho(-right,right,-top,top,-1,1);
    var viewMat=mat4_lookAt(viewPos,at,up);
    var viewProjMat=mat4_mul_mat4(projMat,viewMat);
    var invViewProjMat=mat4_inverse(viewProjMat);

    var s2w = vec3_unproject(invViewProjMat,cursor,viewport);
    var w2s=vec3_project(viewProjMat,s2w,viewport);
    
    
    //log(projMat.map(x=>x),"proj1");
    //log(viewMat.map(x=>x),"view1");
    //log(viewProjMat.map(x=>x),"viewProj1");
    //log(invViewProjMat.map(x=>x),"invViewProj1");
    log(s2w.map(x=>Math.floor(x)),"s2w1");
    log(w2s.map(x=>Math.floor(x)),"w2s1");
    
    
    
}
    test1([curPosZoom[0],0,curPosZoom[1]],curPosZoom[2],screenSize,cursor);
    
    
    /*
    var s2w=new THREE.Vector3((cursor[0]/screenSize[0])*2-1,((screenSize[1]-cursor[1]-1)/screenSize[1])*2-1,0);
    s2w.unproject( camera );
    
    crossDraw.position.x=s2w.x;
    crossDraw.position.y=0.1;
    crossDraw.position.z=s2w.z;

    //squareDraw.position.x=s2w.x;
    //squareDraw.position.y=0.1;
    //squareDraw.position.z=s2w.z;
    
    var w2s=s2w.clone().project( camera );
    w2s.x=(w2s.x*0.5+0.5)*screenSize[0];
    w2s.y=(w2s.y*0.5+0.5)*screenSize[1];
    
    //
    log(s2w.toArray().map(x=>Math.floor(x)),"s2w0");
    log(w2s.toArray().map(x=>Math.floor(x)),"w2s0");
    
    */